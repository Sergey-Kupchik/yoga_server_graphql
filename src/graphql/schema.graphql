type Query {
        agent (id:ID!): User!
        agents (name:String, age:Int): [User!]
        posts: [Post!]!
        post (id:ID!): Post!
        pictures: [Picture!]!
        picture (id:ID!): Picture!
        # getAnumal: Animal!
        getAnumal: AnimalInterface!
    }

type Mutation {
    createAgent (data:CreateAgentInput): User!
    createPost (title: String!, content: String!, author: ID!): Post!
    deletePost (id:ID!):Boolean!
    deleteAgent (id:ID!):Boolean!
    changeAgent (id:ID!, name: String, age: Int, married: Boolean ): User!
    }

input CreateAgentInput {
    name: String!, 
    age: Int!, 
    married: Boolean! 
}
enum StatusType {
    active
     not_active
     trainee
     guest
     good
     anactive
}

type User {
        id: ID!
        name: String!
        age: Int!
        married: Boolean! 
        average: Float!
        status: StatusType!
        posts: [Post!]!
        pictures: [Picture]!
    }
type Post {
        id: ID!
        title: String!
        content: String!
        author:  User! 
        picture: Picture!
    }
type Picture {
        id: ID!
        path: String!
        post: Post!
        author:  User! 
    }

# union Animal = Dog | Cat

interface AnimalInterface {
    type: String!
    name: String!
}
type Dog implements AnimalInterface{
    type: String!
    name: String!
    hair:String!
}
type Cat implements AnimalInterface{
    type: String!
    name: String!
    paws:Boolean!
}